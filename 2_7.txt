/*
struct list {
    int64_t value;
    struct list* next;
};
*/

void print_int64(int64_t i);

void print_int64_with_space(int64_t i){
    print_int64(i);
    printf(" ");
}

/* Запустить функцию f на каждом элементе списка  */
void list_foreach(const struct list* l, void (f)(int64_t)) {
    const struct list* iterator = l;
    
    while( iterator != NULL ){
        f(iterator->value);
        iterator = iterator->next;
    }
}

/* Вывести список с помощью foreach и дополнительной функции */
void list_print(const struct list* l) { 
    list_foreach(l, print_int64_with_space);
}


--------

/*
struct list {
    int64_t value;
    struct list* next;
};
*/

/* Изменить каждый элемент списка с помощью функции f  */
void list_map_mut(struct list * l, int64_t (f) (int64_t))  {
    struct list * iterator = l;
    
    while(iterator!=NULL){
        iterator->value = f(iterator->value);
        iterator = iterator->next;   
    }
}


static int64_t triple( int64_t x ) { return x * 3; }

/* Используя list_map_mut умножьте все элементы списка на 3 */
void list_triple( struct list * l ) { 
    list_map_mut(l, triple);
}

---------

/*
struct list {
    int64_t value;
    struct list* next;
};
*/

/* Вы можете пользоваться следующими функциями */
void print_int64(int64_t i);
struct list* node_create( int64_t value );

int64_t nothing_int64(int64_t i){
    return i;
}

int64_t abs_int64(int64_t i){
    if (i < 0)
        i *= -1;
    
    return i;
}

/*  Создать новый список, в котором каждый элемент получен из соответствующего
    элемента списка l путём применения функции f */
struct list* list_map(const struct list * l, int64_t (f) (int64_t))  {
    //если элементов нет, то список пуст
    if (l == NULL)
        return NULL;
    
    //добавляем первый
    struct list* new_list = node_create(f(l->value));
    struct list* last = new_list;
    
    //копирование со второго
    const struct list * iterator = l->next;
    while( iterator != NULL){
        struct list* node = node_create(f(iterator->value));
        
        last->next = node;
        last = last->next;
        
        iterator = iterator->next;
    }
    
    return new_list;
}

struct list* list_copy(const struct list * l ) {
    return list_map(l, nothing_int64);
}

struct list* list_abs(const struct list * l ) {
    return list_map(l, abs_int64);
}


----------

/*
struct list {
    int64_t value;
    struct list* next;
};
*/
/* Вы можете пользоваться этими функциями */
void print_int64(int64_t i);
struct list* node_create( int64_t value );
void list_destroy( struct list* list );

static int64_t sum( int64_t x, int64_t y) { return x + y; }

typedef int64_t folding(int64_t, int64_t);

/* Свернуть список l с помощью функции f. */
int64_t list_fold(const struct list* l, int64_t init, folding f) {
    int64_t accumulator = init;
    
    const struct list* iterator = l;
    while( iterator != NULL ){
        accumulator = f(accumulator, iterator-> value);
        iterator = iterator->next;
    }
    
    return accumulator;
}

/* Просуммируйте список с помощью list_fold и sum */
int64_t list_sum( const struct list* l ) {
    return list_fold(l, 0, sum);
}


-------

/*
struct list {
    int64_t value;
    struct list* next;
};
*/
void print_int64(int64_t i);

struct list* node_create( int64_t value );
void list_destroy( struct list* list );


/*  Сгенерировать список длины sz с помощью значения init и функции f
 Результат: init, f(init), f(f(init)), ... */
struct list* list_iterate( int64_t init, size_t sz, int64_t(f)(int64_t)) {
    //если элементов нет, то список пуст
    if (sz == 0)
        return NULL;
    
    //добавляем нулевой
    struct list* list = node_create(init);
    struct list* last = list;
    
    //копирование с первого
    for(size_t i = 1; i < sz; i++){ // i-тый элемент списка
        int64_t accumulator = init;
        for(size_t j = 0; j < i; j++) // j раз вызываем f
            accumulator = f(accumulator);
       
        struct list* node = node_create(accumulator);
        
        last->next = node;
        last = last->next;
    }
    
    return list;
}